Enhancements:
	- Headless mode:
		-> How-to enable: test.settings -> ShowVisualSettingsDialogOnStartup = false
		-> Command line properties that will override the defaults at test.settings:
			-> -DSequenceLength=X or -DSL=X (X = number of actions for each test sequence)
			-> -DGrahResuming=true/false or -DGRA=true/false
			-> -DShowVisualSettingsDialogOnStartup=true/false or -Dheadless=false/true
	- Prolog:
		-> Facts are automatically calculated based on execution information (states, actions, graphs)
		-> actions rules to build feasible UI actions
		-> queries can be performed (e.g. UI actions filtering and selection, oracles definition)
	- Testing protocol
		-> OracleLayerProtocol
			-> Semi-automated specification of oracles
			-> shortcuts/process:
				--> CTRL + S: Start new oracle specification
					---> Human perform UI actions until a verification point is reached
				--> CTRL + O: Mark an oracle verification point (widget under cursor)
				--> CTRL + E: Finish the oracle specification
			-> Automated oracles inference (alpha development):
				--> TITLE property UPDATE based predicate
					---> the predicate infers a dependency from a list of executed Actions to a Verification point TITLE property
					---> sandbox: calculator with bugs
			-> Human exercised oracle is interpreted as correct behaviour
				--> not correct behaviour is reported by the oracle
		-> EventHandler for the testing protocol layers (Abstract, Default, Oracle, ClickFilter)
		-> ClickFilterLayerProtocol refactored
			--> Filtering and data(input values) managers
				---> Data is loaded from input_values.xml
			--> Toggle CAPS_LOCK to switch widgets IDs coding between ABSTRACT_R_T_ID (enabled) and ABSTRACT_R_T_P_ID (disabled)
		-> ProtocolFilter.idx changed to protocol_filter.xml
		-> Filter several widgets at once
			--> Tabu list: ctrl + area
			--> White list: shift + ctrl + area
			--> how to define the area: move mouse to opposing area corners between (shift+)ctrl press/release
		-> Text-fields - valid input values
			--> keyboard shortcut: ALT
			--> A popup dialog is displayed with a list of input types
		-> New available action: StdActionCompiler -> mouseMove(Widget)
		-> Slow-motion mode (shortcut = SHIFT+SPACE): delay between actions is increased notably
			--> pressing the shortcut again will deactivate the slow-motion
	- Spy mode
		-> widget and state IDs are visible if Shift+2 is enabled
		-> Protocol cycle interval is dynamically adjusted for improved performance (e.g. Widget Tree construction)
		-> New mode SHIFT+4: fullscreen display of the widget tree
			--> widget under cursor and ancestors are marked in the widget tree
			--> widget under cursor ancestors IDs are displayed
			--> widget under cursor information is displayed
			--> SUT information is displayed as widget tree root
			--> widget tree is collapsed for children > 8 (single child displayed)
				---> collapse rendering: BEFORE_CHILDREN_COUNT < > AFTER_CHILDREN_COUNT
		-> SHIFT+1 actions feedback
			--> displayed in darker color for widgets that were executed (by an action) almost once
			--> feedback color alpha value dependent on the target widgets zindex
	- GenerateManual mode
		-> Inherited SHIFT + 2..4 shortcuts from Spy mode
	- Graphs
		-> XML version
		-> Previous test sequence graph can be automatically resumed
		-> Resumed graphs are marked with
			--> dashed style for known states/actions
			--> dooted style for known and revisited states/actions
	- Metrics: metrics/*.csv files for each test sequence
		-> graph resuming metrics (known states, revisited states, new states)
	- Feedback dialogs
		-> Displayed (short-time) when TESTAR changes working mode: Spy, Generate, Oracle specification, etc.
		
Improvements:
	- test.settings:
		-> TestGenerator (random, qlearning, maxcoverage) can now be selected from TESTAR UI
		-> algorithms
			--> qlearning improved
			--> qlearning+: qlearning + periodic state jumps
				---> Jumps: move to less explored UI State (state must be reachable from current UI exploration graph)
			--> maxcoverage is now functional: taboo actions + state jumps
				---> taboo actions: those already executed
				---> state jumps: when all the current state actions have been executed
		-> Forms-filling algorithm:
			--> activation now at test.settings (AlgorithmFormsFilling = true/false)
			--> refactored from AbstractProtocol to "graph" project
		-> GraphResuming property (true/false)
	- CodingManager:
		-> all widgets/states and actions IDs calculated once from widget-tree information:
			--> ConcreteID <- ROLE, TITLE, SHAPE, ENABLED properties
			--> Abs(R)ID <- ROLE property
			--> Abs(R,T)ID <- ROLE, TITLE properties
			--> Abs(R,T,P)ID <- ROLE; TITLE, PATH properties
	- Test information serialisation through threads to avoid test efficiency penalty:
		-> Logs:
			--> Widgets information reporting has been extended with additional fields
			--> A log file for each test sequence
		-> Screenshots: png files for UI states and actions
		-> Tests sequences: compressed, at test sequence end (RAM optimisation), to reduce disk size
	- TESTAR UI:
		-> Changed Generate-button to Test-button
		-> New available options:
			--> Algorithms - Exploration sample interval
			--> Algorithms - Graphs activated
			--> Algorithms - Prolog activated
	- Graphs:
		-> Populating graphs now in sync with TESTAR test execution (graph was updated with an action lag)
	- Disk space:
		-> No more temporal libraries creation (dll files are now loaded as external resources)
	- Other minor adjustements

Reporting:
	- Longest path in the UI exploration (how far a test did go into the UI?)
		-> marked at graphs (CONCRETE/non-ABSTRACT versions) with thick nodes outlines
	- Minimum and maximum (<1.0 as UI actions space is unknown) coverage for all explored states
	- SUT resource usage before each executed action
		-> memory usage (in KB)
		-> cpu usage
			--> ms for user & system modes
			--> CPU % (user + system)
	- TESTAR monitoring (@console)
		- Test UI actions delay (CPU)
		- Java heap (RAM)
		- Logs, test artefacts and SUT UI screenshots serialisation queues
	
Refactors:
	- core package
		-> visualizers and exceptions

Reconfigurations:
	- Keyboard shortcuts:
		-> Alt switched to Shift+Alt to display hierarchical relationships
		-> CAPS_LOCK toggle switched to TAB for viewing widgets matching status
	- Action visualisation in Spy-mode
		-> Widget under cursor mark changed from green to yellow
	
Fixes:
	- Action visualisation in Spy-mode
		-> Left double click changed from red-circle to green-circle (red color is reserved to action execution visualisation)
	- Memory leaks resolved (screenshots serialisation and test fragments serialisation)